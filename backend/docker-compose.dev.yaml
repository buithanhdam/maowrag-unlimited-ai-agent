version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports: 
      - "6379:6379"
    volumes:
      - ./data/redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - maowrag-backend-dev
  postgres:
    image: postgres:14.5
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}  # Add this to create the database
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]  # Updated healthcheck
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - maowrag-backend-dev
  qdrant:
    image: "qdrant/qdrant:v1.12.0"
    ports:
      - "6335:6333"
      - "6336:6334"
    volumes:
      - ./data/qdrant_storage:/qdrant/storage
    environment:
      QDRANT__STORAGE__ON_DISK_PAYLOAD: 'true'
    networks:
      - maowrag-backend-dev
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/localhost/6333 && echo -e 'GET /healthz HTTP/1.1\r\nHost: localhost\r\n\r\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 30s
      timeout: 180s
      retries: 3
      start_period: 40s
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "src.celery_worker", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - maowrag-backend-dev
    command: celery -A src.celery_worker worker --loglevel=info

  backend:
    build:
      context: .
      dockerfile: Dockerfile.api.dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - maowrag-backend-dev

networks:
  maowrag-backend-dev:
    driver: bridge
